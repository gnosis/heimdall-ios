//
//  StandardToken.swift
//
//  Generated by Bivrost at 1509358341.76775.
//

struct StandardToken {
    struct Approve: SolidityFunction {
        static let methodId = "095ea7b3"
        typealias Return = Solidity.Bool
        typealias Arguments = (spender: Solidity.Address, value: Solidity.UInt256)
        static func encodeCall(arguments: Arguments) -> String {
            return "0x\(methodId)\(BaseEncoder.encode(arguments: arguments.spender, arguments.value))"
        }
        static func decode(returnData: String) throws -> Return {
            let source = BaseDecoder.partition(returnData)
            // Static Types & Location
            let param0 = try Solidity.Bool.decode(source: source)
            // Dynamic Types
            return param0
        }
        static func decode(argumentsData: String) throws -> Arguments {
            let source = BaseDecoder.partition(argumentsData)
            // Static Types & Location
            let spender = try Solidity.Address.decode(source: source)
            let value = try Solidity.UInt256.decode(source: source)
            // Dynamic Types
            return Arguments(spender: spender, value: value)
        }
    }
    struct TotalSupply: SolidityFunction {
        static let methodId = "18160ddd"
        typealias Return = Solidity.UInt256
        typealias Arguments = Void
        static func encodeCall(arguments: Arguments) -> String {
            return "0x\(methodId)\(BaseEncoder.encode(arguments: arguments))"
        }
        static func decode(returnData: String) throws -> Return {
            let source = BaseDecoder.partition(returnData)
            // Static Types & Location
            let param0 = try Solidity.UInt256.decode(source: source)
            // Dynamic Types
            return param0
        }
        static func decode(argumentsData: String) throws -> Arguments {
            let source = BaseDecoder.partition(argumentsData)
            // Static Types & Location
            // Dynamic Types
            return 
        }
    }
    struct Allowance: SolidityFunction {
        static let methodId = "dd62ed3e"
        typealias Return = Solidity.UInt256
        typealias Arguments = (owner: Solidity.Address, spender: Solidity.Address)
        static func encodeCall(arguments: Arguments) -> String {
            return "0x\(methodId)\(BaseEncoder.encode(arguments: arguments.owner, arguments.spender))"
        }
        static func decode(returnData: String) throws -> Return {
            let source = BaseDecoder.partition(returnData)
            // Static Types & Location
            let param0 = try Solidity.UInt256.decode(source: source)
            // Dynamic Types
            return param0
        }
        static func decode(argumentsData: String) throws -> Arguments {
            let source = BaseDecoder.partition(argumentsData)
            // Static Types & Location
            let owner = try Solidity.Address.decode(source: source)
            let spender = try Solidity.Address.decode(source: source)
            // Dynamic Types
            return Arguments(owner: owner, spender: spender)
        }
    }
    struct TransferFrom: SolidityFunction {
        static let methodId = "23b872dd"
        typealias Return = Solidity.Bool
        typealias Arguments = (from: Solidity.Address, to: Solidity.Address, value: Solidity.UInt256)
        static func encodeCall(arguments: Arguments) -> String {
            return "0x\(methodId)\(BaseEncoder.encode(arguments: arguments.from, arguments.to, arguments.value))"
        }
        static func decode(returnData: String) throws -> Return {
            let source = BaseDecoder.partition(returnData)
            // Static Types & Location
            let param0 = try Solidity.Bool.decode(source: source)
            // Dynamic Types
            return param0
        }
        static func decode(argumentsData: String) throws -> Arguments {
            let source = BaseDecoder.partition(argumentsData)
            // Static Types & Location
            let from = try Solidity.Address.decode(source: source)
            let to = try Solidity.Address.decode(source: source)
            let value = try Solidity.UInt256.decode(source: source)
            // Dynamic Types
            return Arguments(from: from, to: to, value: value)
        }
    }
    struct BalanceOf: SolidityFunction {
        static let methodId = "70a08231"
        typealias Return = Solidity.UInt256
        typealias Arguments = Solidity.Address
        static func encodeCall(arguments: Arguments) -> String {
            return "0x\(methodId)\(BaseEncoder.encode(arguments: arguments))"
        }
        static func decode(returnData: String) throws -> Return {
            let source = BaseDecoder.partition(returnData)
            // Static Types & Location
            let param0 = try Solidity.UInt256.decode(source: source)
            // Dynamic Types
            return param0
        }
        static func decode(argumentsData: String) throws -> Arguments {
            let source = BaseDecoder.partition(argumentsData)
            // Static Types & Location
            let owner = try Solidity.Address.decode(source: source)
            // Dynamic Types
            return owner
        }
    }
    struct Transfer: SolidityFunction {
        static let methodId = "a9059cbb"
        typealias Return = Solidity.Bool
        typealias Arguments = (to: Solidity.Address, value: Solidity.UInt256)
        static func encodeCall(arguments: Arguments) -> String {
            return "0x\(methodId)\(BaseEncoder.encode(arguments: arguments.to, arguments.value))"
        }
        static func decode(returnData: String) throws -> Return {
            let source = BaseDecoder.partition(returnData)
            // Static Types & Location
            let param0 = try Solidity.Bool.decode(source: source)
            // Dynamic Types
            return param0
        }
        static func decode(argumentsData: String) throws -> Arguments {
            let source = BaseDecoder.partition(argumentsData)
            // Static Types & Location
            let to = try Solidity.Address.decode(source: source)
            let value = try Solidity.UInt256.decode(source: source)
            // Dynamic Types
            return Arguments(to: to, value: value)
        }
    }
}
